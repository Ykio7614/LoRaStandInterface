package com.loramaster.ui;

import org.geotools.data.FileDataStore;
import org.geotools.data.FileDataStoreFinder;
import org.geotools.data.collection.ListFeatureCollection;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.map.FeatureLayer;
import org.geotools.map.Layer;
import org.geotools.map.MapContent;
import org.geotools.styling.*;
import org.geotools.swing.JMapFrame;
import org.geotools.swing.JMapPane;
import org.locationtech.jts.geom.*;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

import javax.swing.*;
import java.awt.Color;
import java.awt.BorderLayout;
import java.io.File;
import java.util.Collections;

public class MapPanel extends JPanel {

    private static final String DATA_DIR = "D:/map/try_map_geo/shapefiles/spb_city/data";

    public MapPanel() {
        super(new BorderLayout());

        try {
            File folder = new File(DATA_DIR);
            if (!folder.exists()) {
                System.err.println("–ù–µ—Ç –ø–∞–ø–∫–∏: " + DATA_DIR);
                add(new JLabel("–ù–µ—Ç –ø–∞–ø–∫–∏: " + DATA_DIR), BorderLayout.CENTER);
                return;
            }

            MapContent map = new MapContent();
            map.setTitle("–°–ü–± + —Ç–µ–ø–ª–æ–≤—ã–µ –∑–æ–Ω—ã");

            File[] shpFiles = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".shp"));
            if (shpFiles == null || shpFiles.length == 0) {
                System.err.println("–ù–µ—Ç .shp —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ " + DATA_DIR);
                add(new JLabel("–ù–µ—Ç .shp —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ " + DATA_DIR), BorderLayout.CENTER);
                return;
            }

            StyleBuilder sb = new StyleBuilder();

            for (File shp : shpFiles) {
                FileDataStore store = FileDataStoreFinder.getDataStore(shp);
                SimpleFeatureSource featureSource = store.getFeatureSource();
                String geomType = featureSource.getSchema().getGeometryDescriptor().getType().getBinding().getSimpleName();

                Style style;
                if (geomType.equalsIgnoreCase("Point") || geomType.equalsIgnoreCase("MultiPoint")) {
                    style = createPointStyle(sb);
                } else if (geomType.equalsIgnoreCase("LineString") || geomType.equalsIgnoreCase("MultiLineString")) {
                    style = createLineStyle(sb);
                } else if (geomType.equalsIgnoreCase("Polygon") || geomType.equalsIgnoreCase("MultiPolygon")) {
                    style = createPolygonStyle(sb);
                } else {
                    style = SLD.createSimpleStyle(featureSource.getSchema());
                }

                Layer layer = new FeatureLayer(featureSource, style);
                map.addLayer(layer);
            }

            // üî• –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ø–ª–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –≤ —Ä–∞–π–æ–Ω–µ (59.94, 30.46)
            Layer heatLayer = createHeatLayer(59.94, 30.46, 2000); // —Ä–∞–¥–∏—É—Å ~2000 –º
            map.addLayer(heatLayer);

            // --- –≤–º–µ—Å—Ç–æ JMapFrame.showMap(map) ‚Äî —Å–æ–∑–¥–∞—ë–º JMapFrame –∏ –±–µ—Ä–µ–º –∏–∑ –Ω–µ–≥–æ JMapPane ---
            JMapFrame mapFrame = new JMapFrame(map);
            mapFrame.enableToolBar(true);
            mapFrame.enableStatusBar(true);

            // –¥–æ—Å—Ç–∞—ë–º —Ç—É–ª–±–∞—Ä (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) –∏ –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã
            JToolBar toolBar = mapFrame.getToolBar();
            JMapPane mapPane = mapFrame.getMapPane();

            if (toolBar != null) {
                add(toolBar, BorderLayout.NORTH);
            }
            add(mapPane, BorderLayout.CENTER);
            // –Ω–µ –¥–µ–ª–∞–µ–º mapFrame.setVisible(true) ‚Äî –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

        } catch (Exception e) {
            e.printStackTrace();
            add(new JLabel("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: " + e.getMessage()), BorderLayout.CENTER);
        }
    }

    /** –°—Ç–∏–ª—å –¥–ª—è –ª–∏–Ω–∏–π */
    private static Style createLineStyle(StyleBuilder sb) {
        Stroke stroke = sb.createStroke(Color.BLUE, 1.5);
        LineSymbolizer sym = sb.createLineSymbolizer(stroke);
        return sb.createStyle(sym);
    }

    /** –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ */
    private static Style createPolygonStyle(StyleBuilder sb) {
        Stroke stroke = sb.createStroke(Color.BLACK, 0.8);
        Fill fill = sb.createFill(Color.CYAN, 0.4);
        PolygonSymbolizer sym = sb.createPolygonSymbolizer(stroke, fill);
        return sb.createStyle(sym);
    }

    /** –°—Ç–∏–ª—å –¥–ª—è —Ç–æ—á–µ–∫ */
    private static Style createPointStyle(StyleBuilder sb) {
        Graphic graphic = sb.createGraphic(
                null,
                sb.createMark(StyleBuilder.MARK_CIRCLE, Color.RED, Color.BLACK, 1),
                null
        );
        graphic.setSize(sb.literalExpression(6));
        PointSymbolizer sym = sb.createPointSymbolizer(graphic);
        return sb.createStyle(sym);
    }

    /** –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è —Å "—Ç–µ–ø–ª–æ–≤–æ–π –æ–±–ª–∞—Å—Ç—å—é" */
    private static Layer createHeatLayer(double lat, double lon, double radiusMeters) throws Exception {
        GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();

        // —Å–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        Coordinate coord = new Coordinate(lon, lat); // ‚ö†Ô∏è –ø–æ—Ä—è–¥–æ–∫: X=lon, Y=lat
        Point center = geometryFactory.createPoint(coord);

        // –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–∫—É –≤ –∫—Ä—É–≥ (buffer = —Ä–∞–¥–∏—É—Å –≤ –≥—Ä–∞–¥—É—Å–∞—Ö, –ø—Ä–∏–º–µ—Ä–Ω–æ)
        // 1 –≥—Ä–∞–¥—É—Å ‚âà 111 –∫–º, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Ç—Ä—ã ‚Üí –≥—Ä–∞–¥—É—Å—ã
        double radiusDegrees = radiusMeters / 111000.0;
        Polygon circle = (Polygon) center.buffer(radiusDegrees);

        // —Å–æ–∑–¥–∞—ë–º —Ç–∏–ø
        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
        tb.setName("HeatArea");
        tb.add("the_geom", Polygon.class);
        SimpleFeatureType TYPE = tb.buildFeatureType();

        SimpleFeature feature = SimpleFeatureBuilder.build(TYPE, new Object[]{circle}, null);

        ListFeatureCollection collection = new ListFeatureCollection(TYPE, Collections.singletonList(feature));

        // —Å—Ç–∏–ª—å ‚Äî –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ (—ç—Ç–æ —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫)
        StyleBuilder sb = new StyleBuilder();
        Fill fill = sb.createFill(new Color(255, 0, 0, 50)); // –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
        fill.setOpacity(sb.literalExpression(0.5)); // 20% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        Stroke stroke = sb.createStroke(new Color(255, 0, 0, 120), 1.0);
        PolygonSymbolizer sym = sb.createPolygonSymbolizer(stroke, fill);
        Style style = sb.createStyle(sym);

        return new FeatureLayer(collection, style);
    }
}
